EASY:  
Question:  Minimum Operations to Make the Array Increasing

CODE:

class Solution {
public:
    int minOperations(vector<int>& nums) {
         int operations = 0; 
        int n = nums.size();
        
        for (int i = 1; i < n; ++i) {
            
            if (nums[i] <= nums[i - 1]) {
              
                int increment = nums[i - 1] - nums[i] + 1;
                operations += increment; 
                nums[i] += increment;
            }
        }
        
        return operations;  
    }
};




MEDIUM:
Question: Remove Stones to Minimize the Total

CODE:

class Solution {
public:
    int minStoneSum(vector<int>& piles, int k) {
         std::priority_queue<int> maxHeap(piles.begin(), piles.end());
        
        for (int i = 0; i < k; ++i) {
           
            int maxPile = maxHeap.top();
            maxHeap.pop();
           
            int stonesToRemove = maxPile / 2;
           
            int newPile = maxPile - stonesToRemove;
            
            maxHeap.push(newPile);
        }
        
        int totalRemaining = 0;
        while (!maxHeap.empty()) {
            totalRemaining += maxHeap.top();
            maxHeap.pop();
        }
        
        return totalRemaining;
    }
};




HARD:
Question: Maximum Number of Tasks You Can Assign

CODE:

class Solution {
public:
    int maxTaskAssign(vector<int>& tasks, vector<int>& workers, int pills, int strength) {
         std::sort(tasks.begin(), tasks.end());
        std::sort(workers.begin(), workers.end());
        
        int n = tasks.size();
        int m = workers.size();
        int taskCount = 0;
        
        int workerIndex = 0;
        
        for (int taskIndex = 0; taskIndex < n; ++taskIndex) {
           
            while (workerIndex < m && workers[workerIndex] < tasks[taskIndex]) {
                workerIndex++;
            }
           
            if (workerIndex < m) {
                taskCount++;
                workerIndex++;
            }
        }
       
        workerIndex = 0;
        
        for (int taskIndex = 0; taskIndex < n; ++taskIndex) {
            while (workerIndex < m && workers[workerIndex] < tasks[taskIndex] - strength) {
                workerIndex++;
            }
            if (workerIndex < m && pills > 0) {
                taskCount++;
                pills--;
                workerIndex++;
            }
        }
        
        return taskCount; 
    }
};
